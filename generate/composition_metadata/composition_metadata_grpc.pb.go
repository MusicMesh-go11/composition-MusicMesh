// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: composition_metadata.proto

package composition_metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompositionMetadataServiceClient is the client API for CompositionMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompositionMetadataServiceClient interface {
	Create(ctx context.Context, in *CompositionMetadata, opts ...grpc.CallOption) (*Void, error)
	GetTrending(ctx context.Context, in *Void, opts ...grpc.CallOption) (*CompositionsRes, error)
	GetRecommended(ctx context.Context, in *Void, opts ...grpc.CallOption) (*CompositionsRes, error)
	GetByGenre(ctx context.Context, in *GenreRequest, opts ...grpc.CallOption) (*CompositionsRes, error)
	Like(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	UnLike(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *CompositionRes, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *CompositionMetadataId, opts ...grpc.CallOption) (*Void, error)
}

type compositionMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositionMetadataServiceClient(cc grpc.ClientConnInterface) CompositionMetadataServiceClient {
	return &compositionMetadataServiceClient{cc}
}

func (c *compositionMetadataServiceClient) Create(ctx context.Context, in *CompositionMetadata, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) GetTrending(ctx context.Context, in *Void, opts ...grpc.CallOption) (*CompositionsRes, error) {
	out := new(CompositionsRes)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/GetTrending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) GetRecommended(ctx context.Context, in *Void, opts ...grpc.CallOption) (*CompositionsRes, error) {
	out := new(CompositionsRes)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/GetRecommended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) GetByGenre(ctx context.Context, in *GenreRequest, opts ...grpc.CallOption) (*CompositionsRes, error) {
	out := new(CompositionsRes)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/GetByGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) Like(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/Like", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) UnLike(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/UnLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) Update(ctx context.Context, in *CompositionRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionMetadataServiceClient) Delete(ctx context.Context, in *CompositionMetadataId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/compositionMetadata.CompositionMetadataService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositionMetadataServiceServer is the server API for CompositionMetadataService service.
// All implementations must embed UnimplementedCompositionMetadataServiceServer
// for forward compatibility
type CompositionMetadataServiceServer interface {
	Create(context.Context, *CompositionMetadata) (*Void, error)
	GetTrending(context.Context, *Void) (*CompositionsRes, error)
	GetRecommended(context.Context, *Void) (*CompositionsRes, error)
	GetByGenre(context.Context, *GenreRequest) (*CompositionsRes, error)
	Like(context.Context, *Void) (*Void, error)
	UnLike(context.Context, *Void) (*Void, error)
	Update(context.Context, *CompositionRes) (*Void, error)
	Delete(context.Context, *CompositionMetadataId) (*Void, error)
	mustEmbedUnimplementedCompositionMetadataServiceServer()
}

// UnimplementedCompositionMetadataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompositionMetadataServiceServer struct {
}

func (UnimplementedCompositionMetadataServiceServer) Create(context.Context, *CompositionMetadata) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) GetTrending(context.Context, *Void) (*CompositionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrending not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) GetRecommended(context.Context, *Void) (*CompositionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommended not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) GetByGenre(context.Context, *GenreRequest) (*CompositionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGenre not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) Like(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) UnLike(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLike not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) Update(context.Context, *CompositionRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) Delete(context.Context, *CompositionMetadataId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCompositionMetadataServiceServer) mustEmbedUnimplementedCompositionMetadataServiceServer() {
}

// UnsafeCompositionMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositionMetadataServiceServer will
// result in compilation errors.
type UnsafeCompositionMetadataServiceServer interface {
	mustEmbedUnimplementedCompositionMetadataServiceServer()
}

func RegisterCompositionMetadataServiceServer(s grpc.ServiceRegistrar, srv CompositionMetadataServiceServer) {
	s.RegisterService(&CompositionMetadataService_ServiceDesc, srv)
}

func _CompositionMetadataService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).Create(ctx, req.(*CompositionMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_GetTrending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).GetTrending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/GetTrending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).GetTrending(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_GetRecommended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).GetRecommended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/GetRecommended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).GetRecommended(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_GetByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).GetByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/GetByGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).GetByGenre(ctx, req.(*GenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/Like",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).Like(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_UnLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).UnLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/UnLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).UnLike(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).Update(ctx, req.(*CompositionRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionMetadataService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionMetadataId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionMetadataServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compositionMetadata.CompositionMetadataService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionMetadataServiceServer).Delete(ctx, req.(*CompositionMetadataId))
	}
	return interceptor(ctx, in, info, handler)
}

// CompositionMetadataService_ServiceDesc is the grpc.ServiceDesc for CompositionMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompositionMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compositionMetadata.CompositionMetadataService",
	HandlerType: (*CompositionMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompositionMetadataService_Create_Handler,
		},
		{
			MethodName: "GetTrending",
			Handler:    _CompositionMetadataService_GetTrending_Handler,
		},
		{
			MethodName: "GetRecommended",
			Handler:    _CompositionMetadataService_GetRecommended_Handler,
		},
		{
			MethodName: "GetByGenre",
			Handler:    _CompositionMetadataService_GetByGenre_Handler,
		},
		{
			MethodName: "Like",
			Handler:    _CompositionMetadataService_Like_Handler,
		},
		{
			MethodName: "UnLike",
			Handler:    _CompositionMetadataService_UnLike_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CompositionMetadataService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompositionMetadataService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "composition_metadata.proto",
}
