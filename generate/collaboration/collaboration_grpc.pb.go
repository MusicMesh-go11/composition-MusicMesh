// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: collaboration.proto

package collaboration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollaborationServiceClient is the client API for CollaborationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaborationServiceClient interface {
	Create(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *CollaborationID, opts ...grpc.CallOption) (*CollaborationRes, error)
	GetByCompositionId(ctx context.Context, in *CompositionID, opts ...grpc.CallOption) (*CollaborationResList, error)
	Update(ctx context.Context, in *CollaborationRes, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *CollaborationID, opts ...grpc.CallOption) (*Void, error)
}

type collaborationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationServiceClient(cc grpc.ClientConnInterface) CollaborationServiceClient {
	return &collaborationServiceClient{cc}
}

func (c *collaborationServiceClient) Create(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/collaboration.CollaborationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetById(ctx context.Context, in *CollaborationID, opts ...grpc.CallOption) (*CollaborationRes, error) {
	out := new(CollaborationRes)
	err := c.cc.Invoke(ctx, "/collaboration.CollaborationService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetByCompositionId(ctx context.Context, in *CompositionID, opts ...grpc.CallOption) (*CollaborationResList, error) {
	out := new(CollaborationResList)
	err := c.cc.Invoke(ctx, "/collaboration.CollaborationService/GetByCompositionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) Update(ctx context.Context, in *CollaborationRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/collaboration.CollaborationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) Delete(ctx context.Context, in *CollaborationID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/collaboration.CollaborationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationServiceServer is the server API for CollaborationService service.
// All implementations must embed UnimplementedCollaborationServiceServer
// for forward compatibility
type CollaborationServiceServer interface {
	Create(context.Context, *Collaboration) (*Void, error)
	GetById(context.Context, *CollaborationID) (*CollaborationRes, error)
	GetByCompositionId(context.Context, *CompositionID) (*CollaborationResList, error)
	Update(context.Context, *CollaborationRes) (*Void, error)
	Delete(context.Context, *CollaborationID) (*Void, error)
	mustEmbedUnimplementedCollaborationServiceServer()
}

// UnimplementedCollaborationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollaborationServiceServer struct {
}

func (UnimplementedCollaborationServiceServer) Create(context.Context, *Collaboration) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCollaborationServiceServer) GetById(context.Context, *CollaborationID) (*CollaborationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCollaborationServiceServer) GetByCompositionId(context.Context, *CompositionID) (*CollaborationResList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCompositionId not implemented")
}
func (UnimplementedCollaborationServiceServer) Update(context.Context, *CollaborationRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCollaborationServiceServer) Delete(context.Context, *CollaborationID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCollaborationServiceServer) mustEmbedUnimplementedCollaborationServiceServer() {}

// UnsafeCollaborationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationServiceServer will
// result in compilation errors.
type UnsafeCollaborationServiceServer interface {
	mustEmbedUnimplementedCollaborationServiceServer()
}

func RegisterCollaborationServiceServer(s grpc.ServiceRegistrar, srv CollaborationServiceServer) {
	s.RegisterService(&CollaborationService_ServiceDesc, srv)
}

func _CollaborationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collaboration.CollaborationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).Create(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaborationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collaboration.CollaborationService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetById(ctx, req.(*CollaborationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetByCompositionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetByCompositionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collaboration.CollaborationService/GetByCompositionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetByCompositionId(ctx, req.(*CompositionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaborationRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collaboration.CollaborationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).Update(ctx, req.(*CollaborationRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollaborationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collaboration.CollaborationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).Delete(ctx, req.(*CollaborationID))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationService_ServiceDesc is the grpc.ServiceDesc for CollaborationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collaboration.CollaborationService",
	HandlerType: (*CollaborationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CollaborationService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CollaborationService_GetById_Handler,
		},
		{
			MethodName: "GetByCompositionId",
			Handler:    _CollaborationService_GetByCompositionId_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CollaborationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CollaborationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collaboration.proto",
}
