// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: composition.proto

package composition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompositionServiceClient is the client API for CompositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompositionServiceClient interface {
	Create(ctx context.Context, in *Composition, opts ...grpc.CallOption) (*Void, error)
	GetByID(ctx context.Context, in *CompositionId, opts ...grpc.CallOption) (*CompositionRes, error)
	GetByUserID(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CompositionsRes, error)
	Update(ctx context.Context, in *CompositionRes, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *CompositionId, opts ...grpc.CallOption) (*Void, error)
}

type compositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositionServiceClient(cc grpc.ClientConnInterface) CompositionServiceClient {
	return &compositionServiceClient{cc}
}

func (c *compositionServiceClient) Create(ctx context.Context, in *Composition, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/composition.CompositionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) GetByID(ctx context.Context, in *CompositionId, opts ...grpc.CallOption) (*CompositionRes, error) {
	out := new(CompositionRes)
	err := c.cc.Invoke(ctx, "/composition.CompositionService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) GetByUserID(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*CompositionsRes, error) {
	out := new(CompositionsRes)
	err := c.cc.Invoke(ctx, "/composition.CompositionService/GetByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) Update(ctx context.Context, in *CompositionRes, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/composition.CompositionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionServiceClient) Delete(ctx context.Context, in *CompositionId, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/composition.CompositionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositionServiceServer is the server API for CompositionService service.
// All implementations must embed UnimplementedCompositionServiceServer
// for forward compatibility
type CompositionServiceServer interface {
	Create(context.Context, *Composition) (*Void, error)
	GetByID(context.Context, *CompositionId) (*CompositionRes, error)
	GetByUserID(context.Context, *UserId) (*CompositionsRes, error)
	Update(context.Context, *CompositionRes) (*Void, error)
	Delete(context.Context, *CompositionId) (*Void, error)
	mustEmbedUnimplementedCompositionServiceServer()
}

// UnimplementedCompositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompositionServiceServer struct {
}

func (UnimplementedCompositionServiceServer) Create(context.Context, *Composition) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCompositionServiceServer) GetByID(context.Context, *CompositionId) (*CompositionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCompositionServiceServer) GetByUserID(context.Context, *UserId) (*CompositionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserID not implemented")
}
func (UnimplementedCompositionServiceServer) Update(context.Context, *CompositionRes) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCompositionServiceServer) Delete(context.Context, *CompositionId) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCompositionServiceServer) mustEmbedUnimplementedCompositionServiceServer() {}

// UnsafeCompositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositionServiceServer will
// result in compilation errors.
type UnsafeCompositionServiceServer interface {
	mustEmbedUnimplementedCompositionServiceServer()
}

func RegisterCompositionServiceServer(s grpc.ServiceRegistrar, srv CompositionServiceServer) {
	s.RegisterService(&CompositionService_ServiceDesc, srv)
}

func _CompositionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Composition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composition.CompositionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).Create(ctx, req.(*Composition))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composition.CompositionService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).GetByID(ctx, req.(*CompositionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_GetByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).GetByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composition.CompositionService/GetByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).GetByUserID(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composition.CompositionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).Update(ctx, req.(*CompositionRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composition.CompositionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionServiceServer).Delete(ctx, req.(*CompositionId))
	}
	return interceptor(ctx, in, info, handler)
}

// CompositionService_ServiceDesc is the grpc.ServiceDesc for CompositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "composition.CompositionService",
	HandlerType: (*CompositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompositionService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _CompositionService_GetByID_Handler,
		},
		{
			MethodName: "GetByUserID",
			Handler:    _CompositionService_GetByUserID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CompositionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompositionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "composition.proto",
}
